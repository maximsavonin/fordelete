#
!t3.cpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception graphics.h initializer_list ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error type_traits typeinfo wchar.h wctype.h #<#>
Arrow _type_ #<t3.cpp>
Arrow(int c, int x, int y, int w, int h) #<t3.cpp>
Figure _type_ #<t3.cpp>
Figure() -> virtual~ #<t3.cpp>
Figure(int c, int x, int y) #<t3.cpp>
FillArrow _type_ #<t3.cpp>
FillArrow(int c, int x, int y, int w, int h, int fillc) #<t3.cpp>
main() -> int #<t3.cpp>
	Arrow:%w : double #<t3.cpp>
	Arrow:%h : double #<t3.cpp>
	Arrow:%draw() -> void #<t3.cpp>
	Arrow:%x : int #<t3.cpp>
	Arrow:%y : int #<t3.cpp>
	Arrow:%draw() -> virtual void #<t3.cpp>
	Arrow::setsizes(double w, double h) -> void #<t3.cpp>
	Arrow::move(int x, int y) -> void #<t3.cpp>
	Arrow::setcolor(int c) -> void #<t3.cpp>
	Arrow::hide() -> void #<t3.cpp>
	Arrow::show() -> void #<t3.cpp>
	Arrow=:area(int& x1, int& y1, int& x2, int& y2) -> void #<t3.cpp>
	Arrow=:getcolor() -> int #<t3.cpp>
	Arrow=:isvisible() -> bool #<t3.cpp>
	Arrow=:area(int& x1, int& y1, int& x2, int& y2) -> virtual void #<t3.cpp>
	Figure:%c : int #<t3.cpp>
	Figure:%visible : bool #<t3.cpp>
	Figure:%x : int #<t3.cpp>
	Figure:%y : int #<t3.cpp>
	Figure:%draw() -> virtual void #<t3.cpp>
	Figure::move(int x, int y) -> void #<t3.cpp>
	Figure::setcolor(int c) -> void #<t3.cpp>
	Figure::hide() -> void #<t3.cpp>
	Figure::show() -> void #<t3.cpp>
	Figure=:getcolor() -> int #<t3.cpp>
	Figure=:isvisible() -> bool #<t3.cpp>
	Figure=:area(int& x1, int& y1, int& x2, int& y2) -> virtual void #<t3.cpp>
	FillArrow:%fillc : int #<t3.cpp>
	FillArrow:%draw() -> void #<t3.cpp>
	FillArrow:%w : double #<t3.cpp>
	FillArrow:%h : double #<t3.cpp>
	FillArrow:%draw() -> void #<t3.cpp>
	FillArrow:%x : int #<t3.cpp>
	FillArrow:%y : int #<t3.cpp>
	FillArrow:%draw() -> virtual void #<t3.cpp>
	FillArrow::setfillcolor(int c) -> void #<t3.cpp>
	FillArrow::setsizes(double w, double h) -> void #<t3.cpp>
	FillArrow::move(int x, int y) -> void #<t3.cpp>
	FillArrow::setcolor(int c) -> void #<t3.cpp>
	FillArrow::hide() -> void #<t3.cpp>
	FillArrow::show() -> void #<t3.cpp>
	FillArrow=:area(int& x1, int& y1, int& x2, int& y2) -> void #<t3.cpp>
	FillArrow=:getcolor() -> int #<t3.cpp>
	FillArrow=:isvisible() -> bool #<t3.cpp>
	FillArrow=:area(int& x1, int& y1, int& x2, int& y2) -> virtual void #<t3.cpp>
