# control.h draw.h
!control.cpp cctype cerrno clocale control.h cstdint cstdio cstdlib ctype.h cwchar errno.h exception graphics.h initializer_list iosfwd keys_n_colors.h limits limits.h locale.h new signal.h stddef.h stdint.h stdio.h stdlib.h string string_view type_traits typeinfo wchar.h #<#>
!draw.cpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype draw.h errno.h exception graphics.h initializer_list ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h math.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error type_traits typeinfo wchar.h wctype.h #<#>
!main.cpp cctype cerrno clocale cmath control.h cstdint cstdio cstdlib ctype.h cwchar cwctype draw.h errno.h exception graphics.h initializer_list ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h math.h new numeric ostream random signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error time.h type_traits typeinfo utility vector wchar.h wctype.h #<#>
Fill : struct #<draw.h>
Fill _type_ #<draw.cpp>
Point : struct #<draw.h>
Point _type_ #<draw.cpp>
_USE_MATH_DEFINES #<main.cpp>
act : struct #<draw.h>
act _type_ #<draw.cpp>
addCircle : void #<draw.h>
addCircle(act acts[1000], int& countDo, int color) -> void #<draw.cpp>
addLine : void #<draw.h>
addLine(act acts[1000], int& countDo, int color) -> void #<draw.cpp>
addLineBez : void #<draw.h>
addLineBez(act acts[1000], int& countDo, int color) -> void #<draw.cpp>
addPoint(int x, int y, Point* root) -> Point* #<draw.cpp>
addPoint(int, int, Point*) -> Point* #<draw.h>
addStar : void #<draw.h>
addStar(act acts[1000], int& countDo, int color) -> void #<draw.cpp>
butSave(int left, int top) -> bool #<control.cpp>
butSave(int, int) -> bool #<control.h>
circl _type_ #<draw.h>
circl() #<draw.h>
circl(int, int, int) #<draw.h>
circl(int, int, int, int) #<draw.h>
circl(int, int, int, int, int) #<draw.h>
drawAll : void #<draw.h>
drawAll(act acts[1000], int countDo) -> void #<draw.cpp>
fillIn(int x, int y, int colorFill, int colorNow) -> void #<draw.cpp>
fillIn(int, int, int, int) -> void #<draw.h>
lineB _type_ #<draw.h>
lineB(int, int, int, int, int) #<draw.h>
lineB(int, int, int, int, int, int) #<draw.h>
lineBez _type_ #<draw.h>
lineBez() #<draw.h>
lineBez(int) #<draw.h>
lineBez(int, int) #<draw.h>
lineCha _type_ #<draw.h>
lineCha() #<draw.h>
lineCha(int) #<draw.h>
lineCha(int, int) #<draw.h>
lineColor(int x, int y, int col[3][2], int num, IMAGE* image) -> void #<control.cpp>
lineColor(int, int, int[3][2], int, IMAGE*) -> void #<control.h>
main() -> int #<main.cpp>
pefog(int pef[100], int k, int n) -> void #<main.cpp>
pole(int left, int top, int widht, int height, string Text, int data, int& wrt, int t) -> int #<control.cpp>
pole(int, int, int, int, std::string, int, int&, int) -> int #<control.h>
save(int left=0, int top=0, int width=0, int height=0) -> void #<draw.cpp>
save(int, int, int, int) -> void #<draw.h>
saveScr(int left, int top, int width, int height) -> IMAGE* #<control.cpp>
saveScr(int, int, int, int) -> IMAGE* #<control.h>
star _type_ #<draw.h>
star() #<draw.h>
star(const star& obj) #<draw.h>
star(int, int, int, int) #<draw.h>
star(int, int, int, int, float) #<draw.h>
star(int, int, int, int, float, int) #<draw.h>
star(int, int, int, int, float, int, int) #<draw.h>
	Fill::x : int #<main.cpp>
	Fill::y : int #<main.cpp>
	Fill::color : int #<main.cpp>
	Point::x : int #<main.cpp>
	Point::y : int #<main.cpp>
	Point::next : Point* #<main.cpp>
	act::num : int #<main.cpp>
	act::lin : lineB #<main.cpp>
	act::sta : star #<main.cpp>
	act::circ : circl #<main.cpp>
	act::fil : Fill #<main.cpp>
	act::linBz : lineBez #<main.cpp>
	act::lineCh : lineCha #<main.cpp>
	circl:%x : int #<draw.h>
	circl:%y : int #<draw.h>
	circl:%r : int #<draw.h>
	circl:%colorLine : int #<draw.h>
	circl:%WHITE : intcolorFill= #<draw.h>
	circl::setCenter(int, int) -> void #<draw.h>
	circl::setRadius(int) -> void #<draw.h>
	circl::setColorLine(int) -> void #<draw.h>
	circl::setColorFill(int) -> void #<draw.h>
	circl::draw() -> void #<draw.h>
	circl::fill() -> void #<draw.h>
	lineB:%x1 : int #<draw.h>
	lineB:%y1 : int #<draw.h>
	lineB:%x2 : int #<draw.h>
	lineB:%y2 : int #<draw.h>
	lineB:%color : int #<draw.h>
	lineB:%lineB : intwidth=1;public: #<draw.h>
	lineB:%setColor(int) -> void #<draw.h>
	lineB:%setStart(int, int) -> void #<draw.h>
	lineB:%setEnd(int, int) -> void #<draw.h>
	lineB:%setWidth(int) -> void #<draw.h>
	lineB:%draw() -> void #<draw.h>
	lineBez:%n : int #<draw.h>
	lineBez:%WHITE : intcolor= #<draw.h>
	lineBez:%data : intwidth=1;int[][] #<draw.h>
	lineBez:%step : double #<draw.h>
	lineBez:%pefog(int[100], int, int) -> void #<draw.h>
	lineBez::add(int, int) -> void #<draw.h>
	lineBez::setColor(int) -> void #<draw.h>
	lineBez::setWidth(int) -> void #<draw.h>
	lineBez::setStep(double) -> void #<draw.h>
	lineBez::draw() -> void #<draw.h>
	lineCha:%color : int #<draw.h>
	lineCha:%root : intwidth=1;Point* #<draw.h>
	lineCha:%chaikin : Point* #<draw.h>
	lineCha:%drawL : void #<draw.h>
	lineCha:%del : void #<draw.h>
	lineCha::delRoot() -> void #<draw.h>
	lineCha::add(int, int) -> void #<draw.h>
	lineCha::setColor(int) -> void #<draw.h>
	lineCha::setWidth(int) -> void #<draw.h>
	lineCha::draw() -> void #<draw.h>
	star:%x : int #<draw.h>
	star:%y : int #<draw.h>
	star:%r : int #<draw.h>
	star:%n : int #<draw.h>
	star:%WHITE : intcolorLine= #<draw.h>
	star:%WHITE : intcolorFill= #<draw.h>
	star:%fi : float #<draw.h>
	star:%lines : lineB[] #<draw.h>
	star:%creatStar() -> void #<draw.h>
	star:%lineColor() -> void #<draw.h>
	star::setRadius(int) -> void #<draw.h>
	star::setCenter(int, int) -> void #<draw.h>
	star::setNumCorners(int) -> void #<draw.h>
	star::setColorLine(int) -> void #<draw.h>
	star::setColorFill(int) -> void #<draw.h>
	star::setCorners(int) -> void #<draw.h>
	star::draw() -> void #<draw.h>
	star::fill() -> void #<draw.h>
