#
!main.cpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception initializer_list ios iosfwd iostream istream limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error type_traits typeinfo wchar.h wctype.h #<#>
NOD(long a, long b) -> long #<main.cpp>
Rational _type_ #<main.cpp>
Rational(long a=0, long b=1) #<main.cpp>
operator!=(const Rational& x, const Rational& y) -> bool #<main.cpp>
operator!=(const Rational&, const Rational&) -> bool #<main.cpp>
operator(const Rational& x, const Rational& y) -> bool #<main.cpp>
operator(const Rational&, const Rational&) -> bool #<main.cpp>
operator<< : ostream& #<main.cpp>
operator==(const Rational& x, const Rational& y) -> bool #<main.cpp>
operator==(const Rational&, const Rational&) -> bool #<main.cpp>
operator>(const Rational& x, const Rational& y) -> bool #<main.cpp>
operator>(const Rational&, const Rational&) -> bool #<main.cpp>
operator>=(const Rational& x, const Rational& y) -> bool #<main.cpp>
operator>=(const Rational&, const Rational&) -> bool #<main.cpp>
operator>> : istream& #<main.cpp>
	Rational:%a : long #<main.cpp>
	Rational:%b : long #<main.cpp>
	Rational::operator=(const long a1) -> Rational& #<main.cpp>
	Rational::operator+(Rational, Rational) -> Rational #<main.cpp>
	Rational::operator+(int&) -> Rational #<main.cpp>
	Rational::operator-(Rational&) -> Rational #<main.cpp>
	Rational::operator*(Rational&) -> Rational #<main.cpp>
	Rational::operator/(Rational&) -> Rational #<main.cpp>
	Rational::operator+=(const Rational&) -> Rational& #<main.cpp>
	Rational::operator-=(const Rational&) -> Rational& #<main.cpp>
	Rational::operator*=(const Rational&) -> Rational& #<main.cpp>
	Rational::operator/=(const Rational&) -> Rational& #<main.cpp>
	Rational=:operator!() -> bool #<main.cpp>
	Rational=:getp() -> long #<main.cpp>
	Rational=:getq() -> long #<main.cpp>
